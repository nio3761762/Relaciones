npm init 
npm install express
npm install typescript
// crea el archivo tsconfig donde configuraremos donde se iran los archivos transpilados  "outDir": "./transpiler", y donde esta el codigo fuente ts     "rootDir": "./src",
//iniciamos y compilamos
npx tsc --init
npx tsc
node transpiler/index.js
// como para compilar de nuevo se hace largo resuminos los pasos anteriores instalando node-dev
npmi ts-node-dev -D
//configuramos en el package.json "dev": "ts-node-dev --respawn src/index.ts"
// ahora podemos utilizar el comando
npm run dev
// instalamos
// express es un frame de node que nos va permitir enviar peticiones y recibir respuestas
// morgan nos permitira ver las peticiones por consola las peticiones get put post .....
// cors es un modulo que nos permitira comunicar el servidor con servidores externos, como servidores de fron end
npm install express morgan cors

//añadimos los tipos de datos de express como dependencia de desarrollo
npm install @types/express -D
// añadimos tambien los types morgan and cors
npm i @types/morgan @types/cors -D

//instalamos los modulos de type orm
Install the npm package:

npm install typeorm --save
npm install typeorm --legacy-peer-deps

You need to install reflect-metadata shim:

npm install reflect-metadata --save

and import it somewhere in the global place of your app (for example in app.ts):

import "reflect-metadata"

You may need to install node typings:

npm install @types/node --save-dev

Install a database driver:

for MySQL or MariaDB

npm install mysql --save (you can install mysql2 instead as well)

for PostgreSQL or CockroachDB

npm install pg --save

for SQLite

npm install sqlite3 --save

for Microsoft SQL Server

npm install mssql --save

for sql.js

npm install sql.js --save

for Oracle

npm install oracledb --save

To make the Oracle driver work, you need to follow the installation instructions from their site.

for SAP Hana

npm install @sap/hana-client
npm install hdb-pool
SAP Hana support made possible by the sponsorship of Neptune Software.

for Google Cloud Spanner

npm install @google-cloud/spanner --save
Provide authentication credentials to your application code by setting the environment variable GOOGLE_APPLICATION_CREDENTIALS:

# Linux/macOS
export GOOGLE_APPLICATION_CREDENTIALS="KEY_PATH"

# Windows
set GOOGLE_APPLICATION_CREDENTIALS=KEY_PATH

# Replace KEY_PATH with the path of the JSON file that contains your service account key.
To use Spanner with the emulator you should set SPANNER_EMULATOR_HOST environment variable:

# Linux/macOS
export SPANNER_EMULATOR_HOST=localhost:9010

# Windows
set SPANNER_EMULATOR_HOST=localhost:9010
for MongoDB (experimental)

npm install mongodb@^5.2.0 --save

for NativeScript, react-native and Cordova


TypeScript configuration
Also, make sure you are using TypeScript version 4.5 or higher, and you have enabled the following settings in tsconfig.json:

"emitDecoratorMetadata": true,
"experimentalDecorators": true,
You may also need to enable es6 in the lib section of compiler options, or install es6-shim from @types.

para {
// para desplegar el proyecto en produccion o verificar si ya se puede llevar a produccion, en esta caso arranca el codigo de java script y no el de typescript
"build": "tsc",
npm run build
//para ejecutarlo
    "start": "node transpiler/index.js"
    npm run start
    }
    //para ejecutar en modo dev
    npm run dev
